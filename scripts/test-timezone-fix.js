#!/usr/bin/env node

/**
 * Script de test pour v√©rifier que le probl√®me de d√©calage horaire est r√©solu
 */

// Simuler l'environnement React Native
global.window = {};
global.navigator = { language: 'fr-FR' };

// Importer les fonctions
const { formatTime, formatTimeLocal, debugTimeZone } = require('../utils/dateHelpers.ts');

console.log('üåç Test de la correction du d√©calage horaire...\n');

// Cas de test avec des heures probl√©matiques
const testCases = [
  { input: '16:00:00', expected: '16:00', description: '16h00 avec secondes' },
  { input: '14:30:00', expected: '14:30', description: '14h30 avec secondes' },
  { input: '09:15:45', expected: '09:15', description: '09h15 avec secondes' },
  { input: '23:45:12', expected: '23:45', description: '23h45 avec secondes' },
  { input: '00:00:00', expected: '00:00', description: 'Minuit avec secondes' },
  { input: '12:00:00', expected: '12:00', description: 'Midi avec secondes' }
];

console.log('üìã Test de la fonction formatTime (simple):\n');

testCases.forEach((testCase, index) => {
  const result = formatTime(testCase.input);
  const passed = result === testCase.expected;
  
  console.log(`   ${passed ? '‚úÖ' : '‚ùå'} Test ${index + 1}: ${testCase.description}`);
  console.log(`      Input: "${testCase.input}" ‚Üí Output: "${result}"`);
  if (!passed) {
    console.log(`      ‚ùå Attendu: "${testCase.expected}"`);
  }
  console.log('');
});

console.log('üåç Test de la fonction formatTimeLocal (avec fuseau horaire):\n');

testCases.forEach((testCase, index) => {
  const result = formatTimeLocal(testCase.input);
  const passed = result === testCase.expected;
  
  console.log(`   ${passed ? '‚úÖ' : '‚ùå'} Test ${index + 1}: ${testCase.description}`);
  console.log(`      Input: "${testCase.input}" ‚Üí Output: "${result}"`);
  if (!passed) {
    console.log(`      ‚ùå Attendu: "${testCase.expected}"`);
  }
  console.log('');
});

console.log('üîç Test de d√©bogage du fuseau horaire pour 16:00:00:\n');

const debugInfo = debugTimeZone('16:00:00');
console.log('Informations de d√©bogage:');
console.log(`   Heure originale: ${debugInfo.originalTime}`);
console.log(`   Heures pars√©es: ${debugInfo.parsedHours}`);
console.log(`   Minutes pars√©es: ${debugInfo.parsedMinutes}`);
console.log(`   Heure locale: ${debugInfo.localTime}`);
console.log(`   Heure UTC: ${debugInfo.utcTime}`);
console.log(`   D√©calage fuseau (minutes): ${debugInfo.timezoneOffset}`);
console.log(`   D√©calage fuseau (heures): ${debugInfo.timezoneOffsetHours}`);

console.log('\nüìä R√©sum√©:');
console.log('   ‚úÖ formatTime: Fonction simple sans d√©calage horaire');
console.log('   üåç formatTimeLocal: Fonction avec gestion du fuseau horaire');
console.log('   üîç debugTimeZone: Fonction de d√©bogage pour diagnostiquer les probl√®mes');

console.log('\nüí° Recommandations:');
console.log('   1. Utiliser formatTime() pour un affichage simple et fiable');
console.log('   2. Utiliser formatTimeLocal() si des probl√®mes de fuseau persistent');
console.log('   3. Utiliser debugTimeZone() pour diagnostiquer les probl√®mes');

// Test de performance
console.log('\n‚ö° Test de performance...');
const iterations = 10000;

// Test formatTime
const startTime1 = Date.now();
for (let i = 0; i < iterations; i++) {
  formatTime('16:00:00');
}
const duration1 = Date.now() - startTime1;

// Test formatTimeLocal
const startTime2 = Date.now();
for (let i = 0; i < iterations; i++) {
  formatTimeLocal('16:00:00');
}
const duration2 = Date.now() - startTime2;

console.log(`   formatTime: ${iterations} appels en ${duration1}ms (${(duration1/iterations).toFixed(4)}ms/appel)`);
console.log(`   formatTimeLocal: ${iterations} appels en ${duration2}ms (${(duration2/iterations).toFixed(4)}ms/appel)`);

if (duration1 < duration2) {
  console.log('   üèÜ formatTime est plus rapide');
} else {
  console.log('   üèÜ formatTimeLocal est plus rapide');
}
